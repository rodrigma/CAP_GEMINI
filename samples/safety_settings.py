# -*- coding: utf-8 -*-
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from absl.testing import absltest

import google.generativeai as genai


class UnitTests(absltest.TestCase):
    def test_safety_settings(self):
        # [START safety_settings]
        model = genai.GenerativeModel("gemini-1.5-flash")
        unsafe_prompt = "I support Martians Soccer Club and I think Jupiterians Football Club sucks! Write a ironic phrase about them."
        response = model.generate_content(
            unsafe_prompt, safety_settings={"HARASSMENT": "BLOCK_ONLY_HIGH"}
        )
        # If you want to set all the safety_settings to the same value you can just pass that value:
        response = model.generate_content(unsafe_prompt, safety_settings="BLOCK_ONLY_HIGH")
        print(response.candidates[0].finish_reason)
        print(response.candidates[0].safety_ratings)
        # [END safety_settings]

    def test_safety_settings_multi(self):
        # [START safety_settings_multi]
        model = genai.GenerativeModel("gemini-1.5-flash")
        unsafe_prompt = "I support Martians Soccer Club and I think Jupiterians Football Club sucks! Write a ironic phrase about them."
        response = model.generate_content(
            unsafe_prompt,
            safety_settings={
                "HATE": "MEDIUM",
                "HARASSMENT": "BLOCK_ONLY_HIGH",
            },
        )
        # If you want to set all the safety_settings to the same value you can just pass that value:
        response = model.generate_content(unsafe_prompt, safety_settings="MEDIUM")
        try:
            print(response.text)
        except:
            print("No information generated by the model.")

        print(response.candidates[0].safety_ratings)
        # [END safety_settings_multi]


if __name__ == "__main__":
    absltest.main()
